import random

from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import files.keyboards as kb
from files import database as db


bot_choice = None

words = [
    "—Å–ª–∏–≤–∞", "–≥—Ä–∞–Ω–∞—Ç", "–∫–∞—Ä–∞–º–±–æ–ª–∞", "—Å–º–µ—Ç–∞–Ω–Ω–æ–µ —è–±–ª–æ–∫–æ", "—Ç–∞–º–∞—Ä–∏–Ω–¥", "—É–≥–ª–∏",
    "–∫–∏–≤–∏", "—Ö—É—Ä–º–∞", "–∫—Ä—ã–∂–æ–≤–Ω–∏–∫", "–∫–∞–∫–∞—à–∫–∞", "–≥–æ—Ä–æ–¥", "—Å—Ç—Ä–∞–Ω–∞", "–∏–≥—Ä–∞",
    "–∂–∏–∑–Ω—å", "—É–ª–∏—Ü–∞", "—Ä–æ–±–æ—Ç"
]

choices = {"Rock": "–ö–∞–º–µ–Ω—å", "Nozh": "–ù–æ–∂–Ω–∏—Ü—ã", "Paper": "–ë—É–º–∞–≥–∞"}

class Form(StatesGroup):
    chislo = State()
    slovo = State()

router = Router()

@router.message(StateFilter(None), CommandStart())
async def cmd_start(message: Message):
    keyb = [
        # [kb.KeyboardButton(text="1‚É£ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"), kb.KeyboardButton(text="üí¨ –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"), kb.KeyboardButton(text="üßª –ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞")],
        [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
        [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
    ]
    keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
    user_id = message.from_user.id
    db.cur.execute("INSERT OR IGNORE INTO users (user_id, wins, defeats, draws, moneyy, numm, wordd) VALUES (?, ?, ?, ?, ?, ?, ?)", (user_id, 0, 0, 0, 0, 0, None))
    db.db.commit()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=keyboard)


@router.callback_query() 
async def process_callback(callback_query: CallbackQuery, state: FSMContext): 
    data = callback_query.data

    if data == "rock":
        bot_choice = random.choice(["Rock", "Nozh", "Paper"])
        if bot_choice == "Paper":
            await callback_query.bot.edit_message_text(
                text="üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ë—É–º–∞–≥—É</b>!",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            play = False
            db.cur.execute("UPDATE users SET defeats = defeats + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
        if bot_choice == "Rock":
            await callback_query.bot.edit_message_text(
                text="ü´• –ù–∏—á—å—è!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ö–∞–º–µ–Ω—å</b>!",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            play = False
            db.cur.execute("UPDATE users SET draws = draws + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
        elif bot_choice == "Nozh":
            await callback_query.bot.edit_message_text(
                text="‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ù–æ–∂–Ω–∏—Ü—ã</b>!\n\n–í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>1 üí∏</b>",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            ) 
            play = False
            db.cur.execute("UPDATE users SET wins = wins + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
        keyb = [
            [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
            [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
        ]
        keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await callback_query.message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë - –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)

    if data == "nozh":
        bot_choice = random.choice(["Rock", "Nozh", "Paper"])
        if bot_choice == "Paper":
            await callback_query.bot.edit_message_text(
                text="‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ë—É–º–∞–≥—É</b>!\n\n–í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>1 üí∏</b>",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            db.cur.execute("UPDATE users SET wins = wins + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
            play = False
        if bot_choice == "Rock":
            await callback_query.bot.edit_message_text(
                text="üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ö–∞–º–µ–Ω—å</b>!",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            db.cur.execute("UPDATE users SET defeats = defeats + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
            play = False
        elif bot_choice == "Nozh":
            await callback_query.bot.edit_message_text(
                text="ü´• –ù–∏—á—å—è!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ù–æ–∂–Ω–∏—Ü—ã</b>!",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            ) 
            db.cur.execute("UPDATE users SET draws = draws + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
            play = False
        keyb = [
            [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
            [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
        ]
        keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await callback_query.message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë - –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)

    if data == "paper":
        bot_choice = random.choice(["Rock", "Nozh", "Paper"])
        if bot_choice == "Paper":
            await callback_query.bot.edit_message_text(
                text="ü´• –ù–∏—á—å—è!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ë—É–º–∞–≥—É</b>!",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            db.cur.execute("UPDATE users SET draws = draws + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
            play = False
        if bot_choice == "Rock":
            await callback_query.bot.edit_message_text(
                text="‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ö–∞–º–µ–Ω—å</b>!\n\n–í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>1 üí∏</b>",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            db.cur.execute("UPDATE users SET wins = wins + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
            play = False
        elif bot_choice == "Nozh":
            await callback_query.bot.edit_message_text(
                text="üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: <b>–ù–æ–∂–Ω–∏—Ü—ã</b>!",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            ) 
            play = False
            db.cur.execute("UPDATE users SET defeats = defeats + {} WHERE user_id = {}".format(1, callback_query.from_user.id))
            db.db.commit()
        keyb = [
            [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
            [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
        ]
        keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await callback_query.message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë - –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)
        
    if data == "chislo":
        db.cur.execute("UPDATE users SET numm = {} WHERE user_id = {}".format(random.randint(1, 100), callback_query.from_user.id))
        db.db.commit()
        await state.set_state(Form.chislo)
        await callback_query.bot.edit_message_text(
            text="<b>–ß–∏—Å–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ!</b>\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç <b>1 –¥–æ 100</b>",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=kb.nazad
        )
    
    if data == "slovo":
        db.cur.execute("UPDATE users SET wordd = ? WHERE user_id = ?", (random.choice(words), callback_query.from_user.id))
        db.db.commit()
        wordd = db.cur.execute("SELECT wordd FROM users WHERE user_id = {}".format(callback_query.from_user.id)).fetchone()[0]
        first_letter = wordd[0]
        last_letter = wordd[-1]
        kolvo = len(wordd)
        await state.set_state(Form.slovo)
        await callback_query.bot.edit_message_text(
            text=f"<b>–°–ª–æ–≤–æ –∑–∞–≥–∞–¥–∞–Ω–æ!</b>\n–í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ <b>'{first_letter}'</b>, –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ <b>'{last_letter}'</b>\n\n–í —Å–ª–æ–≤–µ: <b>{kolvo} –±—É–∫–≤</b>.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=kb.nazad
        )

    if data == "knb":
        await callback_query.bot.edit_message_text(
            text="üé≤ –ë–æ—Ç –≤—ã–±—Ä–∞–ª —Å–≤–æ–π —Ö–æ–¥!\n–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –≤—ã–±–∏—Ä–∞—Ç—å: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=None,
            reply_markup=kb.knb
        )

    if data == "nazad":
        keyb = [
            [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
            [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
        ]
        keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await callback_query.bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            request_timeout=None
        )
        await callback_query.message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=keyboard)

    if data == "ret":
        keyb = [
            [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
            [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
        ]
        keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await callback_query.bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            request_timeout=None
        )
        await callback_query.message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=keyboard)
        await state.clear() 
        await state.set_state(None) 


@router.message(StateFilter(None), F.text.lower() == "üîë —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") 
async def stata(message: Message):
    defeats = db.cur.execute("SELECT defeats FROM users WHERE user_id = {}".format(message.from_user.id)).fetchone()[0]
    wins = db.cur.execute("SELECT wins FROM users WHERE user_id = {}".format(message.from_user.id)).fetchone()[0]
    draws = db.cur.execute("SELECT draws FROM users WHERE user_id = {}".format(message.from_user.id)).fetchone()[0]

    await message.answer(f"üîë –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüèÜ –ü–æ–±–µ–¥ - {wins}\n‚ûñ –ü–æ—Ä–∞–∂–µ–Ω–∏–π - {defeats}\nü•â –ù–∏—á—å–∏—Ö - {draws}\n\nüéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä - {wins + defeats + draws}")


@router.message(Form.chislo) 
async def wait_for_numm(message: Message, state: FSMContext): 
    try: 
        numm = db.cur.execute("SELECT numm FROM users WHERE user_id = {}".format(message.from_user.id)).fetchone()[0]
        namber = int(message.text) 
        if namber < 1 or namber > 100: 
            await message.answer("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É") 
            return 
        elif namber == numm: 
            keyb = [
                [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
                [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
            ]
            keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
            await state.clear() 
            await state.set_state(None) 
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã <b>–æ—Ç–≥–∞–¥–∞–ª–∏</b> –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ\n\n–í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>1 üí∏</b>", parse_mode="HTML", reply_markup=keyboard) 
            db.cur.execute("UPDATE users SET wins = wins + {} WHERE user_id = {}".format(1, message.from_user.id)) 
            db.db.commit()
            givemoney(user_id=message.from_user.id, amount=1)
        elif namber < numm: 
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —á–∏—Å–ª–æ <b>–≤—ã—à–µ</b>, —á–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–Ω–æ–≤–∞.", parse_mode="HTML") 
        elif namber > numm: 
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —á–∏—Å–ª–æ <b>–Ω–∏–∂–µ</b>, —á–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–Ω–æ–≤–∞.", parse_mode="HTML") 
    except ValueError: 
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")


@router.message(Form.slovo)
async def wait_for_slovo(message: Message, state: FSMContext):
    worddd = db.cur.execute("SELECT wordd FROM users WHERE user_id = {}".format(message.from_user.id)).fetchone()[0]
    first_letter = worddd[0]
    last_letter = worddd[-1]
    kolvo = len(worddd)
    if message.text.lower() == worddd:
        keyb = [
            [kb.KeyboardButton(text="üéÆ –ò–≥—Ä—ã")],
            [kb.KeyboardButton(text="üîë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), kb.KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω")]
        ]
        keyboard = kb.ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await state.clear()
        await state.set_state(None)
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã <b>–æ—Ç–≥–∞–¥–∞–ª–∏</b> –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n\n–í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>1 üí∏</b>", parse_mode="HTML", reply_markup=keyboard)
        db.cur.execute("UPDATE users SET wins = wins + {} WHERE user_id = {}".format(1, message.from_user.id))
        db.db.commit()
        givemoney(user_id=message.from_user.id, amount=1)
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ!\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: <b>–∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ {first_letter} –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {last_letter}</b>\n–í —Å–ª–æ–≤–µ: <b>{kolvo} –±—É–∫–≤</b>.", parse_mode="HTML")


@router.message(F.text.lower() == "üéÆ –∏–≥—Ä—ã")
async def games(message: Message):
    await message.answer("‚úÖ", reply_markup=kb.ReplyKeyboardRemove())
    await message.answer("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é –∏–≥—Ä—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å", reply_markup=kb.games)


@router.message(F.text.lower() == "üõí –º–∞–≥–∞–∑–∏–Ω")
async def shop(message: Message):
    moneyy = db.cur.execute("SELECT moneyy FROM users WHERE user_id = {}".format(message.from_user.id)).fetchone()[0]
    await message.answer(f"‚ùå –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {moneyy} üí∏")


def givemoney(user_id, amount):
    db.cur.execute("UPDATE users SET moneyy = moneyy + {} WHERE user_id = {}".format(amount, user_id))
    db.db.commit()